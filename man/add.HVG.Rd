% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{add.HVG}
\alias{add.HVG}
\title{Identify and add highly variable genes (HVG) to an scTypeEval object.}
\usage{
add.HVG(
  scTypeEval,
  normalization.method = c("Log1p", "CLR", "pearson"),
  var.method = c("scran", "basic"),
  sample = NULL,
  ngenes = 500,
  black.list = NULL,
  ncores = 1,
  bparam = NULL,
  progressbar = TRUE,
  ...
)
}
\arguments{
\item{scTypeEval}{An \code{scTypeEval} object.}

\item{normalization.method}{Character string specifying the normalization method to apply.
Options: \code{"Log1p"}, \code{"CLR"}, \code{"pearson"} (default: \code{"Log1p"}).}

\item{var.method}{Character string specifying the method for identifying highly variable genes.
Options: \code{"scran"} or \code{"basic"} (default: \code{"scran"}).}

\item{sample}{Optional. A metadata column name to use for grouping cells before computing HVGs.}

\item{ngenes}{Integer specifying the number of highly variable genes to retain (default: \code{500}).}

\item{black.list}{A character vector of genes to exclude from HVG selection (default: \code{NULL}, uses \code{scTypeEval@black.list}).}

\item{ncores}{Integer specifying the number of CPU cores to use for parallel processing (default: \code{1}).}

\item{bparam}{A \code{BiocParallel} backend parameter object for parallelization. If provided, overrides \code{ncores}.}

\item{progressbar}{Logical, whether to display a progress bar during computation (default: \code{TRUE}).}

\item{...}{Additional arguments passed to pearson residuals normalization functions.}
}
\value{
The modified \code{scTypeEval} object with HVGs added to \code{scTypeEval@gene.lists[["HVG"]]}.
}
\description{
This function detects highly variable genes in an \code{scTypeEval} object using different
normalization and variance calculation methods. The identified genes are stored in the
\code{gene.lists} slot under "HVG".
}
\details{
The function first normalizes the expression matrix using the specified method:

\if{html}{\out{<div class="sourceCode">}}\preformatted{     - `"Log1p"`: Applies log(x+1) transformation to stabilize variance in the count matrix.  

     - `"CLR"`: Performs centered log-ratio normalization, where each gene’s expression  
       is divided by the geometric mean across all genes in a given cell.  

     - `"pearson"`: Computes Pearson residuals from a negative binomial model  
       fitted to the count data. This method is commonly used to reduce technical noise  
       while preserving biological signal.  

     After normalization, HVGs are computed using one of the following approaches:  

     - `"scran"`: Uses the **scran** package’s \link[scran]\{modelGeneVar\} function to identify highly variable genes (HVGs).  
       This approach applies model-based variance decomposition to detect genes with significant biological variation  
       while accounting for technical noise, sample, and batch effects.  

     - `"basic"`: A simpler method based on the variance-to-mean ratio. It ranks genes  
       by their coefficient of variation (CV) and selects the most variable ones.  
       This approach is computationally efficient but lacks statistical modeling.  

     Any genes in the `black.list` are removed before HVG selection.
}\if{html}{\out{</div>}}
}
\examples{
\dontrun{
sceval <- create.scTypeEval(count_matrix, metadata = metadata)
sceval <- add.HVG(sceval)
}

}
