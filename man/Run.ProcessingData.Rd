% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{Run.ProcessingData}
\alias{Run.ProcessingData}
\title{Process and normalize data within an scTypeEval object}
\usage{
Run.ProcessingData(
  scTypeEval,
  ident = NULL,
  sample = NULL,
  normalization.method = "Log1p",
  min.samples = 5,
  min.cells = 10,
  verbose = TRUE
)
}
\arguments{
\item{scTypeEval}{An \code{scTypeEval} object generated by \code{create.scTypeEval}.}

\item{ident}{A column name from metadata to use as the identity class (e.g. cell type, cluster).
If \code{NULL}, defaults to \code{scTypeEval@active.ident}.}

\item{sample}{A column name from metadata indicating sample identifiers, required.}

\item{normalization.method}{A string specifying the normalization method to apply
(default: \code{"Log1p"}).}

\item{min.samples}{Minimum number of samples required to retain a cell type (default: 5).}

\item{min.cells}{Minimum number of cells required to retain a cell type in a sample (default: 10).}

\item{verbose}{Logical indicating whether to print progress messages (default: TRUE).}
}
\value{
An updated \code{scTypeEval} object containing:
\itemize{
\item \code{data}: A list of \code{DataAssay} objects, one for single-cell other for pseudobulk.
}
}
\description{
Runs processing on the count matrix stored in an \code{scTypeEval}
object by aggregating, filtering, and normalizing data.
Results are stored as \code{DataAssay} objects within the \code{scTypeEval}.
}
\details{
The function performs the following steps:
\enumerate{
\item Validates and sets the identity (\code{ident}) and sample grouping (\code{sample}).
\item Iterates over predefined \code{aggregation_types}: single-cell and pseudobulk.
\item Extracts and filters the count matrix using
\code{min.samples} and \code{min.cells} thresholds.
\item Normalizes the resulting matrix.
\item Wraps the processed data into \code{DataAssay} objects.
\item Stores the list of processed assays inside the \code{scTypeEval} object.
}
}
\examples{
\dontrun{
# Run data processing on an scTypeEval object
sceval <- create.scTypeEval(seurat_obj)
sceval <- Run.ProcessingData(sceval, ident = "celltype", sample = "patient_id")
}

}
